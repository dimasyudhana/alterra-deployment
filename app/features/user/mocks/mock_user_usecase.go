// Code generated by MockGen. DO NOT EDIT.
// Source: restful-api/app/features/user (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	user "github.com/dimasyudhana/latihan-deployment.git/app/features/user"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// FindByPhone mocks base method.
func (m *MockUseCase) FindByPhone(arg0 string) ([]*user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", arg0)
	ret0, _ := ret[0].([]*user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUseCaseMockRecorder) FindByPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUseCase)(nil).FindByPhone), arg0)
}

// Login mocks base method.
func (m *MockUseCase) Login(arg0, arg1 string) (user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUseCaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUseCase)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockUseCase) Register(arg0 user.Core) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUseCaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUseCase)(nil).Register), arg0)
}

// UpdateByPhone mocks base method.
func (m *MockUseCase) UpdateByPhone(arg0, arg1, arg2 string) (user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByPhone", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByPhone indicates an expected call of UpdateByPhone.
func (mr *MockUseCaseMockRecorder) UpdateByPhone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByPhone", reflect.TypeOf((*MockUseCase)(nil).UpdateByPhone), arg0, arg1, arg2)
}

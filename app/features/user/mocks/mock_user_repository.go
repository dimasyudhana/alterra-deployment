// Code generated by MockGen. DO NOT EDIT.
// Source: restful-api/app/features/user (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	user "github.com/dimasyudhana/latihan-deployment.git/app/features/user"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindByPhone mocks base method.
func (m *MockRepository) FindByPhone(arg0 string) ([]*user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", arg0)
	ret0, _ := ret[0].([]*user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockRepositoryMockRecorder) FindByPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockRepository)(nil).FindByPhone), arg0)
}

// Login mocks base method.
func (m *MockRepository) Login(arg0, arg1 string) (user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepository)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockRepository) Register(arg0 user.Core) (user.Core, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(user.Core)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRepositoryMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepository)(nil).Register), arg0)
}

// UpdateByPhone mocks base method.
func (m *MockRepository) UpdateByPhone(arg0 string, arg1 user.Core) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByPhone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByPhone indicates an expected call of UpdateByPhone.
func (mr *MockRepositoryMockRecorder) UpdateByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByPhone", reflect.TypeOf((*MockRepository)(nil).UpdateByPhone), arg0, arg1)
}
